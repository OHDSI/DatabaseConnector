% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/InsertTable.R
\name{insertTable}
\alias{insertTable}
\title{Insert a table on the server}
\usage{
insertTable(connection, tableName, data, dropTableIfExists = TRUE,
  createTable = TRUE, tempTable = FALSE, oracleTempSchema = NULL)
}
\arguments{
\item{connection}{The connection to the database server.}

\item{tableName}{The name of the table where the data should be inserted.}

\item{data}{The data frame or ffdf containing the data to be inserted.}

\item{dropTableIfExists}{Drop the table if the table already exists before writing?}

\item{createTable}{Create a new table? If false, will append to existing table.}

\item{tempTable}{Should the table created as a temp table?}

\item{oracleTempSchema}{Specifically for Oracle, a schema with write priviliges where temp tables
can be created.}
}
\description{
This function sends the data in a data frame or ffdf to a table on the server. Either a new table
is created, or the data is appended to an existing table.
}
\details{
This function sends the data in a data frame to a table on the server. Either a new table is
created, or the data is appended to an existing table. 

For Redshift connections, new tables can be bulk loaded using AWS S3 and COPY commands 
for better performance over traditional SQL inserts by setting System Environment variables or
storing keys in ~./aws/credentials file.
}
\examples{
\dontrun{
connectionDetails <- createConnectionDetails(dbms = "mysql",
                                             server = "localhost",
                                             user = "root",
                                             password = "blah",
                                             schema = "cdm_v4")
conn <- connect(connectionDetails)
data <- data.frame(x = c(1, 2, 3), y = c("a", "b", "c"))
insertTable(conn, "my_table", data)
dbDisconnect(conn)

connectionDetails <- createConnectionDetails(dbms = "redshift", 
                                             server = "localhost/database",
                                             port = 5439,
                                             user = "root", 
                                             password = "blah")
Sys.setenv("AWS_ACCESS_KEY_ID" = "some_access_key_id",
           "AWS_SECRET_ACCESS_KEY" = "some_secret_access_key",
           "AWS_DEFAULT_REGION" = "some_aws_region",
           "AWS_BUCKET_NAME" = "some-bucket", 
           "AWS_OBJECT_KEY" = "some-prefix",
           "AWS_SSE_TYPE" = "some_server_side_encryption")
           
conn <- connect(connectionDetails)
data <- data.frame(x = c(1, 2, 3), y = c("a", "b", "c"))
insertTable(conn, "my_table", data)
dbDisconnect(conn)
}
}
\seealso{
\code{\link{CheckAwsS3Connection}}
}
